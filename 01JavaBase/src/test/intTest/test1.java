package intTest;

import org.junit.Test;

/**
 * @Author Qi
 * @data 2021/8/9 16:53
 */
public class test1 {


    /**
     *  最大值+1 会变成最小值分析
     */
    @Test
    public void intMax(){
        /* 二进制计算
         * 1: 0 000 0001   [-1]: 1(取反+1)=> 1 111 1111
         * 运算：
         * [-1] + 1 = 1 111 1111 + 0 000 0001 = (byte)1 00000 0000 = 0000 0000 => 0
         * [-1] + [-1] = 1 111 1111 + 1 111 1111 = (byte)1 1111 1110 =  1 111 1110
         *             = (1 111 1110 取反+1) => 1 000 0001 + 1 = 1 000 0010 => -2
         */

        // byte [-2^7,2^7-1]
        byte a = 126;  // 2^7 = 128
        a+=1;
        System.out.println(a); // 127
        a+=1;
        System.out.println(a); // -128
        // 二进制表示(首位为符号位0正 1负  以补码形式进行存储 负数取反+1)
        // 0111 1111 + 0000 0001 = (byte)1000 0000 = -128

        System.out.println("***********************");
        // int   [-2^31,2^31-1]
        int b = 2147483647; // 2^31 =  2147483648
        System.out.println(b);   // 2147483647
        System.out.println(b+1); // -2147483648
    }
}
